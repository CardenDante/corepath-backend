"""
CorePath Impact Phase 3 Test Script
Test shopping cart, orders, and payment functionality
"""

import asyncio
import sys
import os

# Add the app directory to Python path
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

async def test_phase3():
    """Test Phase 3 components"""
    print("üß™ Testing CorePath Impact Phase 3 Components...")
    print("=" * 50)
    
    # Test 1: Order Models
    print("1. Testing Order Models...")
    try:
        from app.models.order import Order, OrderItem, ShoppingCart, CartItem, Payment, OrderStatus, PaymentStatus
        from app.core.database import SessionLocal
        from app.utils.helpers import generate_order_number
        
        # Test model creation
        db = SessionLocal()
        
        # Test order number generation
        order_number = generate_order_number()
        print(f"   ‚úÖ Order number generated: {order_number}")
        
        # Test order status enum
        print(f"   ‚úÖ Order statuses: {[status.value for status in OrderStatus]}")
        print(f"   ‚úÖ Payment statuses: {[status.value for status in PaymentStatus]}")
        
        # Test order creation
        test_order = Order(
            order_number=order_number,
            user_id=1,
            customer_email="test@example.com",
            customer_name="Test User",
            subtotal=100.0,
            total_amount=110.0,
            shipping_address={"city": "Nairobi", "country": "Kenya"}
        )
        
        # Test order methods
        test_order.calculate_totals()
        test_order.calculate_points_earned()
        
        print(f"   ‚úÖ Order model works: {test_order.order_number}")
        print(f"   ‚úÖ Order total: {test_order.total_amount}")
        print(f"   ‚úÖ Points earned: {test_order.points_earned}")
        print(f"   ‚úÖ Can cancel: {test_order.can_cancel}")
        
        db.close()
        
    except Exception as e:
        print(f"   ‚ùå Order Models Error: {e}")
        return False
    
    # Test 2: Order Schemas
    print("\n2. Testing Order Schemas...")
    try:
        from app.schemas.order import (
            OrderCreate, CartItemAdd, ShippingAddress, 
            OrderItemCreate, CheckoutSummary
        )
        
        # Test shipping address schema
        shipping_address = ShippingAddress(
            first_name="John",
            last_name="Doe",
            address_line_1="123 Main Street",
            city="Nairobi",
            state="Nairobi County",
            postal_code="00100",
            country="Kenya"
        )
        print(f"   ‚úÖ Shipping address schema works: {shipping_address.city}")
        
        # Test cart item add schema
        cart_item = CartItemAdd(
            product_id=1,
            quantity=2
        )
        print(f"   ‚úÖ Cart item schema works: {cart_item.quantity}")
        
        # Test order creation schema
        order_item = OrderItemCreate(
            product_id=1,
            quantity=2
        )
        
        order_create = OrderCreate(
            items=[order_item],
            shipping_address=shipping_address,
            shipping_method="standard",
            payment_method="card"
        )
        print(f"   ‚úÖ Order creation schema works: {len(order_create.items)} items")
        
    except Exception as e:
        print(f"   ‚ùå Order Schemas Error: {e}")
        return False
    
    # Test 3: Cart Service
    print("\n3. Testing Cart Service...")
    try:
        from app.services.cart_service import CartService
        from app.core.database import SessionLocal
        
        db = SessionLocal()
        cart_service = CartService(db)
        
        # Test service methods exist
        assert hasattr(cart_service, 'get_or_create_cart')
        assert hasattr(cart_service, 'add_item')
        assert hasattr(cart_service, 'get_cart_summary')
        assert hasattr(cart_service, 'validate_cart_for_checkout')
        
        print(f"   ‚úÖ Cart service methods available")
        
        # Test shipping calculation
        shipping_cost = cart_service._calculate_shipping([])
        print(f"   ‚úÖ Shipping calculation works: {shipping_cost}")
        
        # Test shipping rates
        rates = cart_service.get_shipping_rates(1, {"country": "Kenya"})
        print(f"   ‚úÖ Shipping rates: {len(rates)} methods available")
        
        db.close()
        
    except Exception as e:
        print(f"   ‚ùå Cart Service Error: {e}")
        return False
    
    # Test 4: Order Service
    print("\n4. Testing Order Service...")
    try:
        from app.services.order_service import OrderService
        from app.core.database import SessionLocal
        
        db = SessionLocal()
        order_service = OrderService(db)
        
        # Test service methods exist
        assert hasattr(order_service, 'create_order')
        assert hasattr(order_service, 'get_order_by_id')
        assert hasattr(order_service, 'cancel_order')
        assert hasattr(order_service, 'create_payment')
        assert hasattr(order_service, 'get_order_statistics')
        
        print(f"   ‚úÖ Order service methods available")
        
        # Test order statistics
        stats = order_service.get_order_statistics()
        print(f"   ‚úÖ Order statistics: {stats['total_orders']} total orders")
        
        # Test shipping cost calculation
        shipping_cost = order_service._calculate_shipping_cost(
            "standard", [], {"country": "Kenya"}
        )
        print(f"   ‚úÖ Shipping cost calculation: {shipping_cost}")
        
        # Test revenue analytics
        analytics = order_service.get_revenue_analytics(30)
        print(f"   ‚úÖ Revenue analytics: {len(analytics['daily_revenue'])} days")
        
        db.close()
        
    except Exception as e:
        print(f"   ‚ùå Order Service Error: {e}")
        return False
    
    # Test 5: API Endpoint Structure
    print("\n5. Testing API Endpoint Structure...")
    try:
        from app.api.v1.endpoints import cart, orders
        
        # Check that routers exist
        assert hasattr(cart, 'router')
        assert hasattr(orders, 'router')
        print(f"   ‚úÖ Cart and Order routers exist")
        
        # Check key cart functions exist
        cart_functions = [
            'get_cart', 'add_to_cart', 'update_cart_item',
            'remove_from_cart', 'clear_cart', 'get_cart_summary'
        ]
        
        for func_name in cart_functions:
            assert hasattr(cart, func_name), f"Missing cart endpoint: {func_name}"
        
        print(f"   ‚úÖ All cart endpoints defined")
        
        # Check key order functions exist
        order_functions = [
            'create_order', 'list_user_orders', 'get_order',
            'cancel_order', 'create_payment', 'get_order_statistics'
        ]
        
        for func_name in order_functions:
            assert hasattr(orders, func_name), f"Missing order endpoint: {func_name}"
        
        print(f"   ‚úÖ All order endpoints defined")
        print(f"   ‚úÖ Payment processing endpoints ready")
        print(f"   ‚úÖ Admin order management ready")
        
    except Exception as e:
        print(f"   ‚ùå API Endpoints Error: {e}")
        return False
    
    # Test 6: Utility Functions
    print("\n6. Testing Phase 3 Utilities...")
    try:
        from app.utils.helpers import generate_order_number, calculate_points_from_amount
        from app.utils.constants import OrderStatus, PaymentStatus, POINTS_CONFIG
        
        # Test order number generation
        order_num1 = generate_order_number()
        order_num2 = generate_order_number()
        
        assert order_num1 != order_num2, "Order numbers should be unique"
        assert order_num1.startswith("CP"), "Order numbers should start with CP"
        
        print(f"   ‚úÖ Order number generation: {order_num1}")
        
        # Test points calculation
        points = calculate_points_from_amount(1000.0)
        print(f"   ‚úÖ Points calculation: {points} points for KES 1000")
        
        # Test constants
        print(f"   ‚úÖ Order statuses loaded: {len([s for s in dir(OrderStatus) if not s.startswith('_')])}")
        print(f"   ‚úÖ Payment statuses loaded: {len([s for s in dir(PaymentStatus) if not s.startswith('_')])}")
        print(f"   ‚úÖ Points config: {POINTS_CONFIG['referral_reward']} per referral")
        
    except Exception as e:
        print(f"   ‚ùå Utilities Error: {e}")
        return False
    
    # Test 7: Database Integration
    print("\n7. Testing Database Integration...")
    try:
        from app.core.database import SessionLocal, check_database_health
        from app.models.order import Order, ShoppingCart
        from app.models.product import Product, Category
        from app.models.user import User
        
        # Check database health
        health = check_database_health()
        print(f"   ‚úÖ Database health: {health['status']}")
        
        # Test table creation (tables should exist)
        db = SessionLocal()
        
        # Check if we can query the new tables
        order_count = db.query(Order).count()
        cart_count = db.query(ShoppingCart).count()
        
        print(f"   ‚úÖ Orders table accessible: {order_count} orders")
        print(f"   ‚úÖ Shopping carts table accessible: {cart_count} carts")
        
        db.close()
        
    except Exception as e:
        print(f"   ‚ùå Database Integration Error: {e}")
        return False
    
    print("\n" + "=" * 50)
    print("üéâ All Phase 3 tests passed successfully!")
    print("\nüìã What's working:")
    print("   ‚úÖ Complete shopping cart system")
    print("   ‚úÖ Order creation and management")
    print("   ‚úÖ Payment processing framework")
    print("   ‚úÖ Order status tracking")
    print("   ‚úÖ Points and rewards integration")
    print("   ‚úÖ Coupon and discount system")
    print("   ‚úÖ Shipping calculation")
    print("   ‚úÖ Inventory management")
    print("   ‚úÖ Admin order management")
    print("   ‚úÖ Order analytics and reporting")
    
    print("\nüöÄ Ready for Phase 4: Merchant System & Referrals!")
    return True


async def create_sample_order_data():
    """Create sample order data for testing"""
    print("\nüå± Creating sample order data for testing...")
    
    try:
        from app.services.cart_service import CartService
        from app.services.order_service import OrderService
        from app.core.database import SessionLocal
        from app.schemas.order import CartItemAdd
        from app.models.user import User
        from app.models.product import Product
        
        db = SessionLocal()
        cart_service = CartService(db)
        order_service = OrderService(db)
        
        # Find a test user (should exist from previous phases)
        user = db.query(User).filter(User.email.like("%test%")).first()
        if not user:
            print("   ‚ö†Ô∏è  No test user found. Please run Phase 1 tests first.")
            return
        
        # Find some products (should exist from Phase 2)
        products = db.query(Product).limit(2).all()
        if not products:
            print("   ‚ö†Ô∏è  No products found. Please run Phase 2 tests first.")
            return
        
        # Clear any existing cart
        cart_service.clear_cart(user.id)
        
        # Add items to cart
        for i, product in enumerate(products):
            try:
                item_data = CartItemAdd(
                    product_id=product.id,
                    quantity=i + 1
                )
                cart_item = cart_service.add_item(user.id, item_data)
                print(f"   ‚úÖ Added {product.name} to cart")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Could not add {product.name} to cart: {e}")
        
        # Get cart summary
        cart_summary = cart_service.get_cart_summary(user.id)
        print(f"   ‚úÖ Cart summary: {cart_summary['item_count']} items, total: {cart_summary['total']}")
        
        # Validate cart for checkout
        validation = cart_service.validate_cart_for_checkout(user.id)
        if validation['is_valid']:
            print(f"   ‚úÖ Cart is valid for checkout")
        else:
            print(f"   ‚ö†Ô∏è  Cart validation issues: {validation['errors']}")
        
        # Get order statistics
        stats = order_service.get_order_statistics()
        print(f"   ‚úÖ Order statistics: {stats['total_orders']} total orders")
        
        db.close()
        print("   üéâ Sample order data setup completed!")
        
    except Exception as e:
        print(f"   ‚ùå Error creating sample order data: {e}")


if __name__ == "__main__":
    # Run the test
    try:
        success = asyncio.run(test_phase3())
        if success:
            # Ask if user wants to create sample data
            response = input("\nüå± Create sample order data for testing? (y/n): ")
            if response.lower().startswith('y'):
                asyncio.run(create_sample_order_data())
            
            print("\n‚úÖ Phase 3 is ready! You can now:")
            print("   ‚Ä¢ Start the server: uvicorn app.main:app --reload")
            print("   ‚Ä¢ Visit API docs: http://localhost:8000/docs")
            print("   ‚Ä¢ Test cart endpoints: /api/v1/cart")
            print("   ‚Ä¢ Test order endpoints: /api/v1/orders")
            print("   ‚Ä¢ Create orders and process payments")
            print("   ‚Ä¢ Use admin order management features")
        else:
            print("\n‚ùå Some tests failed. Please check the errors above.")
    except Exception as e:
        print(f"\nüí• Test script failed: {e}")
        print("Make sure you've run Phase 1 and 2 setup and have all dependencies installed.")